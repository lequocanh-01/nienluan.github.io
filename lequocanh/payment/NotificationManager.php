<?php

/**
 * Qu·∫£n l√Ω th√¥ng b√°o khi c√≥ giao d·ªãch MoMo
 */

class NotificationManager 
{
    private $adminEmail;
    private $adminPhone;
    private $webhookUrl;
    
    public function __construct() 
    {
        // C·∫•u h√¨nh th√¥ng tin admin (c√≥ th·ªÉ ƒë∆∞a v√†o config file)
        $this->adminEmail = 'admin@yourdomain.com'; // Thay b·∫±ng email c·ªßa b·∫°n
        $this->adminPhone = '0123456789'; // Thay b·∫±ng SƒêT c·ªßa b·∫°n
        $this->webhookUrl = 'https://hooks.slack.com/your-webhook'; // Slack webhook (optional)
    }
    
    /**
     * G·ª≠i th√¥ng b√°o khi c√≥ giao d·ªãch th√†nh c√¥ng
     */
    public function notifyPaymentSuccess($transaction) 
    {
        $subject = "‚úÖ Thanh to√°n th√†nh c√¥ng - " . number_format($transaction['amount']) . " VND";
        $message = $this->buildSuccessMessage($transaction);
        
        // G·ª≠i email
        $this->sendEmail($subject, $message);
        
        // G·ª≠i SMS (n·∫øu c√≥ c·∫•u h√¨nh)
        $this->sendSMS("B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c " . number_format($transaction['amount']) . " VND t·ª´ MoMo. Order: " . $transaction['order_id']);
        
        // G·ª≠i Slack notification (n·∫øu c√≥)
        $this->sendSlackNotification($subject, $message, 'good');
        
        // Log notification
        $this->logNotification('SUCCESS', $transaction['order_id'], $message);
    }
    
    /**
     * G·ª≠i th√¥ng b√°o khi c√≥ giao d·ªãch th·∫•t b·∫°i
     */
    public function notifyPaymentFailed($transaction) 
    {
        $subject = "‚ùå Thanh to√°n th·∫•t b·∫°i - " . $transaction['order_id'];
        $message = $this->buildFailedMessage($transaction);
        
        // Ch·ªâ g·ª≠i email cho tr∆∞·ªùng h·ª£p th·∫•t b·∫°i
        $this->sendEmail($subject, $message);
        
        // Log notification
        $this->logNotification('FAILED', $transaction['order_id'], $message);
    }
    
    /**
     * G·ª≠i th√¥ng b√°o t·ªïng k·∫øt h√†ng ng√†y
     */
    public function sendDailySummary() 
    {
        $summary = $this->getDailySummary();
        $subject = "üìä B√°o c√°o giao d·ªãch ng√†y " . date('d/m/Y');
        $message = $this->buildSummaryMessage($summary);
        
        $this->sendEmail($subject, $message);
        $this->logNotification('DAILY_SUMMARY', 'SYSTEM', $message);
    }
    
    /**
     * X√¢y d·ª±ng n·ªôi dung email th√†nh c√¥ng
     */
    private function buildSuccessMessage($transaction) 
    {
        return "
        <h2 style='color: #28a745;'>üí∞ B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c thanh to√°n!</h2>
        
        <div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;'>
            <h3>Th√¥ng tin giao d·ªãch:</h3>
            <ul style='list-style: none; padding: 0;'>
                <li><strong>M√£ ƒë∆°n h√†ng:</strong> {$transaction['order_id']}</li>
                <li><strong>S·ªë ti·ªÅn:</strong> <span style='color: #28a745; font-size: 18px;'>" . number_format($transaction['amount']) . " VND</span></li>
                <li><strong>Th√¥ng tin:</strong> {$transaction['order_info']}</li>
                <li><strong>M√£ giao d·ªãch MoMo:</strong> {$transaction['trans_id']}</li>
                <li><strong>Th·ªùi gian:</strong> " . date('d/m/Y H:i:s', strtotime($transaction['created_at'])) . "</li>
            </ul>
        </div>
        
        <p>Ti·ªÅn s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v√†o t√†i kho·∫£n MoMo Business c·ªßa b·∫°n trong v√≤ng 24h.</p>
        
        <div style='margin-top: 30px; padding: 15px; background: #e3f2fd; border-radius: 5px;'>
            <p><strong>L∆∞u √Ω:</strong> ƒê√¢y l√† th√¥ng b√°o t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng thanh to√°n.</p>
        </div>
        ";
    }
    
    /**
     * X√¢y d·ª±ng n·ªôi dung email th·∫•t b·∫°i
     */
    private function buildFailedMessage($transaction) 
    {
        return "
        <h2 style='color: #dc3545;'>‚ö†Ô∏è Giao d·ªãch thanh to√°n th·∫•t b·∫°i</h2>
        
        <div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;'>
            <h3>Th√¥ng tin giao d·ªãch:</h3>
            <ul style='list-style: none; padding: 0;'>
                <li><strong>M√£ ƒë∆°n h√†ng:</strong> {$transaction['order_id']}</li>
                <li><strong>S·ªë ti·ªÅn:</strong> " . number_format($transaction['amount']) . " VND</li>
                <li><strong>Th√¥ng tin:</strong> {$transaction['order_info']}</li>
                <li><strong>L√Ω do th·∫•t b·∫°i:</strong> {$transaction['message']}</li>
                <li><strong>Th·ªùi gian:</strong> " . date('d/m/Y H:i:s', strtotime($transaction['created_at'])) . "</li>
            </ul>
        </div>
        
        <p>Vui l√≤ng ki·ªÉm tra v√† li√™n h·ªá kh√°ch h√†ng n·∫øu c·∫ßn thi·∫øt.</p>
        ";
    }
    
    /**
     * G·ª≠i email
     */
    private function sendEmail($subject, $message) 
    {
        $headers = [
            'MIME-Version: 1.0',
            'Content-type: text/html; charset=UTF-8',
            'From: MoMo Payment System <noreply@yourdomain.com>',
            'Reply-To: noreply@yourdomain.com',
            'X-Mailer: PHP/' . phpversion()
        ];
        
        try {
            $result = mail($this->adminEmail, $subject, $message, implode("\r\n", $headers));
            if (!$result) {
                error_log("Failed to send email notification: $subject");
            }
        } catch (Exception $e) {
            error_log("Email notification error: " . $e->getMessage());
        }
    }
    
    /**
     * G·ª≠i SMS (c·∫ßn t√≠ch h·ª£p v·ªõi SMS gateway)
     */
    private function sendSMS($message) 
    {
        // V√≠ d·ª• t√≠ch h·ª£p v·ªõi SMS gateway (c·∫ßn c·∫•u h√¨nh)
        // C√≥ th·ªÉ s·ª≠ d·ª•ng: Twilio, AWS SNS, ho·∫∑c SMS gateway Vi·ªát Nam
        
        try {
            // V√≠ d·ª• v·ªõi cURL call t·ªõi SMS API
            /*
            $smsData = [
                'phone' => $this->adminPhone,
                'message' => $message,
                'api_key' => 'YOUR_SMS_API_KEY'
            ];
            
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, 'https://sms-api.example.com/send');
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($smsData));
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
            
            $response = curl_exec($ch);
            curl_close($ch);
            */
            
            // T·∫°m th·ªùi log SMS thay v√¨ g·ª≠i th·∫≠t
            error_log("SMS Notification: $message");
            
        } catch (Exception $e) {
            error_log("SMS notification error: " . $e->getMessage());
        }
    }
    
    /**
     * G·ª≠i Slack notification
     */
    private function sendSlackNotification($title, $message, $color = 'good') 
    {
        if (empty($this->webhookUrl)) {
            return;
        }
        
        try {
            $payload = [
                'attachments' => [
                    [
                        'color' => $color,
                        'title' => $title,
                        'text' => strip_tags($message),
                        'footer' => 'MoMo Payment System',
                        'ts' => time()
                    ]
                ]
            ];
            
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $this->webhookUrl);
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);
            
            curl_exec($ch);
            curl_close($ch);
            
        } catch (Exception $e) {
            error_log("Slack notification error: " . $e->getMessage());
        }
    }
    
    /**
     * L·∫•y th·ªëng k√™ h√†ng ng√†y
     */
    private function getDailySummary() 
    {
        try {
            require_once '../administrator/elements_LQA/mPDO.php';
            $pdo = new mPDO();
            
            $today = date('Y-m-d');
            
            // T·ªïng giao d·ªãch th√†nh c√¥ng
            $successQuery = "SELECT COUNT(*) as count, SUM(amount) as total 
                           FROM momo_transactions 
                           WHERE DATE(created_at) = ? AND status = 'SUCCESS'";
            $success = $pdo->executeS($successQuery, [$today]);
            
            // T·ªïng giao d·ªãch th·∫•t b·∫°i
            $failedQuery = "SELECT COUNT(*) as count 
                          FROM momo_transactions 
                          WHERE DATE(created_at) = ? AND status = 'FAILED'";
            $failed = $pdo->executeS($failedQuery, [$today]);
            
            return [
                'date' => $today,
                'success_count' => $success['count'] ?? 0,
                'success_amount' => $success['total'] ?? 0,
                'failed_count' => $failed['count'] ?? 0
            ];
            
        } catch (Exception $e) {
            error_log("Error getting daily summary: " . $e->getMessage());
            return null;
        }
    }
    
    /**
     * X√¢y d·ª±ng n·ªôi dung b√°o c√°o t·ªïng k·∫øt
     */
    private function buildSummaryMessage($summary) 
    {
        if (!$summary) {
            return "<p>Kh√¥ng th·ªÉ t·∫°o b√°o c√°o do l·ªói h·ªá th·ªëng.</p>";
        }
        
        return "
        <h2>üìä B√°o c√°o giao d·ªãch ng√†y " . date('d/m/Y', strtotime($summary['date'])) . "</h2>
        
        <div style='background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;'>
            <h3>Th·ªëng k√™:</h3>
            <ul style='list-style: none; padding: 0;'>
                <li>‚úÖ <strong>Giao d·ªãch th√†nh c√¥ng:</strong> {$summary['success_count']} giao d·ªãch</li>
                <li>üí∞ <strong>T·ªïng doanh thu:</strong> <span style='color: #28a745; font-size: 18px;'>" . number_format($summary['success_amount']) . " VND</span></li>
                <li>‚ùå <strong>Giao d·ªãch th·∫•t b·∫°i:</strong> {$summary['failed_count']} giao d·ªãch</li>
            </ul>
        </div>
        
        <p>B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông l√∫c " . date('H:i:s d/m/Y') . "</p>
        ";
    }
    
    /**
     * Log notification
     */
    private function logNotification($type, $orderId, $message) 
    {
        $logEntry = [
            'timestamp' => date('Y-m-d H:i:s'),
            'type' => $type,
            'order_id' => $orderId,
            'message' => strip_tags($message)
        ];
        
        error_log("Notification Log: " . json_encode($logEntry));
    }
}
